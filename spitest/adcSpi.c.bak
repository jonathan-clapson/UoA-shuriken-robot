/******************************************************************************
*                                                                             *
* License Agreement                                                           *
*                                                                             *
* Copyright (c) 2003 Altera Corporation, San Jose, California, USA.           *
* All rights reserved.                                                        *
*                                                                             *
* Permission is hereby granted, free of charge, to any person obtaining a     *
* copy of this software and associated documentation files (the "Software"),  *
* to deal in the Software without restriction, including without limitation   *
* the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
* and/or sell copies of the Software, and to permit persons to whom the       *
* Software is furnished to do so, subject to the following conditions:        *
*                                                                             *
* The above copyright notice and this permission notice shall be included in  *
* all copies or substantial portions of the Software.                         *
*                                                                             *
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
* DEALINGS IN THE SOFTWARE.                                                   *
*                                                                             *
* This agreement shall be governed in all respects by the laws of the State   *
* of California and by the laws of the United States of America.              *
*                                                                             *
* Last Modified by Jonathan Clapson, Greg Sumner, Amy Chu, Sam McCardie       *
******************************************************************************/

#include "alt_types.h"
#include <stdio.h>
#include <system.h>
#include "altera_avalon_spi_regs.h"
#include "altera_avalon_spi.h"

/* This is a very simple routine which performs one SPI master transaction.
 * It would be possible to implement a more efficient version using interrupts
 * and sleeping threads but this is probably not worthwhile initially.
 */

int adc_exchange(alt_u32 base, alt_u32 slave,
	const alt_u16 *write_data, alt_u16 *read_data)
{
	alt_u32 status;

	//only send 1 read and one write operation to the hardware
	alt_u32 writeComplete = 0;
	alt_u32 readComplete = 0;

	/* Warning: this function is not currently safe if called in a multi-threaded
	* environment, something above must perform locking to make it safe if more
	* than one thread intends to use it.
	*/
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
	
	/* Wait for any previous communications to finish */
	do
	{
		status = IORD_ALTERA_AVALON_SPI_STATUS(base);
	}
	while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
	/*
	* Discard any stale data present in the RXDATA register, in case
	* previous communication was interrupted and stale data was left
	* behind.
	*/
	IORD_ALTERA_AVALON_SPI_RXDATA(base);

	/* Keep clocking until all the data has been processed. */
	while (!readComplete || !writeComplete)
	{
		status = IORD_ALTERA_AVALON_SPI_STATUS(base);
		if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && !writeComplete)
		{
			writeComplete = 1;
			IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data);
		}

		if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0 && !readComplete)
		{
			readComplete = 1;
			alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

			*read_data = (alt_u16)rxdata;
		}
	}
	
	//check for finished transmit at start rather than end, then we don't have to wait on sensors

	return 0;
}

int adc_reset()
{
	alt_u16 adc_rdata;
	alt_u16 adc_wdata = 0xFFFF;
	adc_exchange(SPI_BASE, 0, &adc_wdata, &adc_rdata);
	adc_wdata = 0xFFFF;
	adc_exchange(SPI_BASE, 0, &adc_wdata, &adc_rdata);
	return 0;
}
